{"version":3,"sources":["components/History/duck/types.js","components/History/duck/actions.js","components/Plot/duck/types.js","components/Plot/duck/actions.js","components/Result/duck/types.js","components/Result/duck/actions.js","components/Form/Form.js","components/Plot/Plot.js","components/Result/Result.js","components/History/History.js","components/MainPage/MainPage.js","App.js","serviceWorker.js","components/Form/duck/types.js","components/Form/duck/reducers.js","components/Form/duck/index.js","components/History/duck/reducers.js","components/History/duck/index.js","components/Plot/duck/reducers.js","components/Result/duck/reducers.js","reducers.js","store.js","index.js"],"names":["item","type","types","Form","props","addResult","bind","handleChange","state","formVal","form","val","event","preventDefault","this","add","setState","target","value","className","onSubmit","layout","Item","required","onChange","htmlType","Component","connect","dispatch","result","R","Math","floor","random","G","B","actionsHistory","actionsResult","actionsPlot","x","y","mode","marker","color","Plot","data","plot","title","autosize","style","width","height","useResizeHandler","Result","History","keyListCounter","history","list","map","key","MainPage","gutter","md","App","Boolean","window","location","hostname","match","INITIAL_STATE","formReducer","action","historyReducer","plotReducer","resultReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07eb1f90.chunk.js","sourcesContent":["const ADD_HISTORY_ITEM = 'ADD_HISTORY_ITEM';\nconst RESET_HISTORY = 'RESET_HISTORY';\n\nexport default {\n    ADD_HISTORY_ITEM,\n    RESET_HISTORY\n}","import types from './types';\n\nconst add = item => ({\n    type: types.ADD_HISTORY_ITEM, item\n});\n\nconst reset = item => ({\n    type: types.RESET_HISTORY, item\n});\n\nexport default {\n    add,\n    reset\n}","const SET_PLOT = 'SET_PLOT';\nconst ADD_DATA = 'ADD_DATA';\n\nexport default {\n    SET_PLOT,\n    ADD_DATA\n}","import types from './types';\n\nconst set = item => ({\n    type: types.SET_PLOT, item\n});\n\nconst add = item => ({\n    type: types.ADD_DATA, item\n});\n\nexport default {\n    set,\n    add\n}","const SET_RESULT = 'SET_RESULT';\nconst RESET_RESULTS = 'RESET_RESULTS';\n\nexport default {\n    SET_RESULT,\n    RESET_RESULTS\n}","import types from './types';\n\nconst set = item => ({\n    type: types.SET_RESULT, item\n});\n\nconst reset = item => ({\n    type: types.RESET_RESULTS, item\n});\n\nexport default {\n    set,\n    reset\n}","import React, { Component } from 'react';\nimport './Form.css';\nimport actionsHistory from '../History/duck/actions'\nimport actionsPlot from '../Plot/duck/actions'\nimport actionsResult from '../Result/duck/actions'\n\nimport { connect } from 'react-redux';\nimport { Button, Input } from 'antd';\nimport { Form as AntForm } from 'antd';\n\n\nclass Form extends Component {\n\n    constructor(props) {\n        super(props);\n        this.addResult = this.addResult.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n        this.state = {\n            formVal: this.props.form.val\n        }\n    }\n\n    addResult(event) {\n        event.preventDefault();\n        this.props.add(this.state.formVal);\n        this.setState({formVal: ''});\n    }\n\n    handleChange(event) {\n        this.setState({formVal: event.target.value});\n    }\n\n    render() {\n        return(\n            <div className=\"Form\">\n                <p>Form component works!</p>\n\n                <AntForm onSubmit={this.addResult} layout=\"vertical\">\n                    <AntForm.Item>\n                        <Input\n                            type='number'\n                            required={true}\n                            value={this.state.formVal}\n                            onChange={this.handleChange.bind(this)}\n                        />\n                    </AntForm.Item>\n                    <AntForm.Item>\n                        <Button type=\"primary\" htmlType='submit'>Save in redux state and plot</Button>\n                    </AntForm.Item>\n                </AntForm>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    form: state.form\n});\n\nconst mapDispatchToProps = dispatch => ({\n    add: (result) => {\n        let R = Math.floor(Math.random()*255);\n        let G = Math.floor(Math.random()*128);\n        let B = Math.floor(Math.random()*255);\n\n        dispatch(actionsHistory.add(result));\n        dispatch(actionsResult.set(result));\n        dispatch(actionsPlot.add(\n            {\n                type: 'scatter',\n                x: [1, 4],\n                y: [result, result],\n                mode: 'lines',\n                marker: {color: `rgb(${R}, ${G}, ${B})`},\n            }\n        ));\n    },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Form);","import React, { Component } from 'react';\nimport './Plot.css';\nimport Plotly from 'react-plotly.js';\n\nimport { connect } from 'react-redux';\n\nclass Plot extends Component {\n\n    render() {\n        return (\n            <div className=\"Plot\">\n                <p>Plot component works!</p>\n                <Plotly\n                    data={this.props.plot.data}\n                    layout={{\n                        title: 'Initial data from redux state',\n                        autosize: true\n                    }}\n                    style={{ width: '100%', height: '100%' }}\n                    useResizeHandler\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    plot: state.plot\n});\n\nexport default connect(mapStateToProps, {}) (Plot);","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport './Result.css';\n\nclass Result extends Component {\n\n    render() {\n        return(\n            <div className=\"Result\">\n                <p>Result component works!</p>\n                <p>Last value: {this.props.result.value}</p>\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = state => ({\n    result: state.result\n});\n\nexport default connect(mapStateToProps, {}) (Result);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './History.css';\n\nclass History extends Component {\n\n    constructor(props) {\n        super(props);\n        this.keyListCounter = 0;\n    }\n\n    render() {\n        return(\n            <div className=\"History\">\n                <p>History component works!</p>\n                <ul>\n                    {this.props.history.list.map(result =>\n                        <li key={this.keyListCounter++}>{result}</li>\n                    )}\n                </ul>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    history: state.history\n});\n\nexport default connect(mapStateToProps, {}) (History);","import React, { Component } from 'react';\nimport './MainPage.css';\nimport Form from \"../Form/Form\";\nimport Plot from \"../Plot/Plot\";\nimport Result from \"../Result/Result\";\nimport History from \"../History/History\";\n\nimport { Row, Col } from 'antd';\n\nclass MainPage extends Component {\n\n    render() {\n        return(\n            <div className=\"MainPage\">\n                <p>MainPage component works!</p>\n                <Row gutter={8}>\n                    <Col md={8}><Form/></Col>\n                    <Col md={16}><Plot/></Col>\n                </Row>\n\n                <Row gutter={8}>\n                    <Col md={12}><History/></Col>\n                    <Col md={12}><Result/></Col>\n                </Row>\n            </div>\n        )\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport './App.css';\nimport MainPage from \"./components/MainPage/MainPage\";\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <p>App component works!</p>\n            <MainPage/>\n        </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const SET_FORM = 'SET_FORM';\n\nexport default {\n    SET_FORM\n}","import types from './types';\n\nconst INITIAL_STATE = {\n    val: '5'\n};\n\nconst formReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case types.SET_FORM:\n            return {\n                val: action.item\n            };\n        default:\n            return state\n    }\n};\n\nexport default formReducer;","import formReducer from './reducers';\nexport { default as formTypes } from './types';\nexport { default as formActions } from './actions';\n\nexport default formReducer;","import types from './types';\n\nconst INITIAL_STATE = {\n    list: []\n};\n\nconst historyReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case types.ADD_HISTORY_ITEM:\n            return {\n                ...state, list: [...state.list, action.item]\n            };\n        case types.RESET_HISTORY:\n            return {\n                ...state, list: []\n            };\n        default:\n            return state\n    }\n};\n\nexport default historyReducer;","import historyReducer from './reducers';\nexport { default as historyTypes } from './types';\nexport { default as historyActions } from './actions';\n\nexport default historyReducer;","import types from './types';\n\nconst INITIAL_STATE = {\n    data: [\n            {\n                type: 'scatter',\n                x: [0, 1, 2, 3, 4, 5],\n                y: [2, 2, 6, 3, 2.8, 3],\n                mode: 'lines',\n                marker: {color: 'red'},\n            },\n            {\n                type: 'scatter',\n                x: [1, 2, 3, 4],\n                y: [4, 1, 2.5, 6],\n                mode: 'lines',\n                marker: {color: 'blue'},\n            },\n    ]\n};\n\nconst plotReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case types.SET_PLOT:\n            return {\n                val: action.item\n            };\n        case types.ADD_DATA:\n            return {\n                ...state, data: [...state.data, action.item]\n            };\n        default:\n            return state\n    }\n};\n\nexport default plotReducer;","import types from './types';\n\nconst INITIAL_STATE = {\n    value: ''\n};\n\nconst resultReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case types.SET_RESULT:\n            return {\n                ...state, value: action.item\n            };\n        case types.RESET_RESULTS:\n            return {\n                ...state, value: ''\n            };\n        default:\n            return state\n    }\n};\n\nexport default resultReducer;","import { combineReducers } from 'redux';\nimport formReducer from './components/Form/duck';\nimport historyReducer from './components/History/duck';\nimport plotReducer from \"./components/Plot/duck/reducers\";\nimport resultReducer from \"./components/Result/duck/reducers\";\n\nconst rootReducer = combineReducers({\n    form: formReducer,\n    history: historyReducer,\n    plot: plotReducer,\n    result: resultReducer\n});\n\nexport default rootReducer;","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}